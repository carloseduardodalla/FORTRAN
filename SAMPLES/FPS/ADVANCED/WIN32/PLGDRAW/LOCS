BITMAP.F90:   i = GetObject (hbm, 24, LOC(bm))
BITMAP.F90:integer*1 pbmih(256) ![ALLOCATABLE] (:)
BITMAP.F90:integer*1 pBits(256)  ![ALLOCATABLE] (:)
BITMAP.F90:   of%lpstrFilter       = LOC(lpszFilter)
BITMAP.F90:   of%lpstrFile         = LOC(buffer)
BITMAP.F90:   of%lpstrInitialDir   = LOC(lpszDirName)
BITMAP.F90:   if (GetOpenFileName (LOC(of)) .eqv. .TRUE.) then              
BITMAP.F90:   fh = lopen (LOC(buffer), OF_READ)
BITMAP.F90:   i = lread (fh, LOC(pbmfh), 14)
BITMAP.F90:   i = lread (fh, LOC(pbmih), bfOffBits - 14)
BITMAP.F90:   i = lread (fh, LOC(pBits), (nbytes - bfOffBits))
BITMAP.F90:      call setptrvalue(LOC(iwidth), LOC(pbmih(5)), 1)
BITMAP.F90:      call setptrvalue(LOC(iheight), LOC(pbmih(9)), 1)
BITMAP.F90:      call CopyMemory(LOC(iplanes), LOC(pbmih(13)), 2)
BITMAP.F90:      call setptrvalue(LOC(ibitcount), LOC(pbmih(15)), 1)
BITMAP.F90:                     LOC(pBits))
BITMAP.F90:      hbm = CreateDIBitmap (hdc, LOC(pbmih), CBM_INIT,                  &
BITMAP.F90:                     LOC(pBits), LOC(pbmih), DIB_RGB_COLORS)
PLGBLT.F90:      wc%lpfnWndProc = LOC(MainWndProc) 
PLGBLT.F90:      wc%hIcon = LoadIcon(hInstance, LOC(lpszIconName)) 
PLGBLT.F90:      wc%lpszMenuName =  LOC(lpszMenuName) 
PLGBLT.F90:      wc%lpszClassName = LOC(lpszClassName) 
PLGBLT.F90:      if (RegisterClass(LOC(wc)) == 0) then
PLGBLT.F90:      LOC(lpszClassName),                                            &
PLGBLT.F90:      LOC(lpszClassName),                                            &
PLGBLT.F90:   hwndDlg = CreateDialogParam (hInst, LOC(lpszDlgName), hwndMain, LOC(DlgProc), 0) 
PLGBLT.F90:   i = GetClientRect (hwndMain, LOC(rect1)) 
PLGBLT.F90:   haccel = LoadAccelerators (hInst, LOC(lpszAccName)) 
PLGBLT.F90:   haccel = LoadAccelerators (hInst, LOC(lpszAccName)) 
PLGBLT.F90:   do while (GetMessage(LOC(mesg),NULL, 0,0) .neqv. .FALSE.) 
PLGBLT.F90:      if (TranslateAccelerator(hwndMain, haccel, LOC(mesg)) == 0) then
PLGBLT.F90:         if (IsDialogMessage (hwndDlg, LOC(mesg)) .neqv. .TRUE.) then
PLGBLT.F90:            i = DispatchMessage(LOC(mesg))
PLGBLT.F90:      if ((PeekMessage (LOC(mesg), hwndMain, 0,0, PM_NOREMOVE) .eqv. .TRUE.).and. (nSpin .ne. 0)) then
PLGBLT.F90:         i = GetClientRect (hwndMain, LOC(rect1)) 
PLGBLT.F90:         hrgn = CreateRectRgnIndirect (LOC(ptoDest%rectClip)) 
PLGBLT.F90:         hrgn = CreateRectRgnIndirect (LOC(ptoSrc%rectClip)) 
PLGBLT.F90:         hrgn = CreateRectRgnIndirect (LOC(ptoMask%rectClip)) 
PLGBLT.F90:         i = SendMessage (hwndDlg, WM_PUTUPLPOINTS, hdcDest,LOC(ptoDest)) 
PLGBLT.F90:         i = SendMessage (hwndDlg, WM_PUTUPSRCRECT, hdcSrc,LOC(ptoSrc)) 
PLGBLT.F90:         i = SendMessage (hwndDlg, WM_PUTUPMASKPT,  hdcMask,LOC(ptoMask)) 
PLGBLT.F90:         hdc = BeginPaint(hwnd, LOC(ps)) 
PLGBLT.F90:         i = EndPaint (hwnd, LOC(ps)) 
PLGBLT.F90:         i  = GetClipBox (hdcDest, LOC(cliprect)) 
PLGBLT.F90:         i = FillRect (hdcDest, LOC(cliprect), GetClassLong (hwnd, GCL_HBRBACKGROUND)) 
PLGBLT.F90:            lpPoint(1).x = GetDlgItemInt(hwndDlg, DID_P1X, LOC(sccess), .TRUE.) 
PLGBLT.F90:            lpPoint(1).y = GetDlgItemInt(hwndDlg, DID_P1Y, LOC(sccess), .TRUE.) 
PLGBLT.F90:            lpPoint(2).x = GetDlgItemInt(hwndDlg, DID_P2X, LOC(sccess), .TRUE.) 
PLGBLT.F90:            lpPoint(2).y = GetDlgItemInt(hwndDlg, DID_P2Y, LOC(sccess), .TRUE.) 
PLGBLT.F90:            lpPoint(3).x = GetDlgItemInt(hwndDlg, DID_P3X, LOC(sccess), .TRUE.) 
PLGBLT.F90:            lpPoint(3).y = GetDlgItemInt(hwndDlg, DID_P3Y, LOC(sccess), .TRUE.) 
PLGBLT.F90:            XSrc = GetDlgItemInt(hwndDlg, DID_XSRC, LOC(sccess), .TRUE.) 
PLGBLT.F90:            YSrc = GetDlgItemInt(hwndDlg, DID_YSRC, LOC(sccess), .TRUE.) 
PLGBLT.F90:            nWidth = GetDlgItemInt(hwndDlg, DID_WIDTH, LOC(sccess), .TRUE.) 
PLGBLT.F90:            nHeight = GetDlgItemInt(hwndDlg, DID_HEIGHT, LOC(sccess),.TRUE.) 
PLGBLT.F90:            XMask = GetDlgItemInt(hwndDlg, DID_XMASK, LOC(sccess), .TRUE.) 
PLGBLT.F90:            YMask = GetDlgItemInt(hwndDlg, DID_YMASK, LOC(sccess), .TRUE.) 
PLGBLT.F90:            i = PlgBlt (hdcDest, LOC(lpPoint), hdcSrc, XSrc, YSrc, nWidth, nHeight,&
PLGBLT.F90:            i = SendMessage(hwndDlg,WM_PUTUPLPOINTS,hdcDest,LOC(ptoDest)) 
PLGBLT.F90:            i = SendMessage (hwndDlg, WM_PUTUPSRCRECT, hdcSrc,LOC(ptoSrc)) 
PLGBLT.F90:            i = SendMessage (hwndDlg, WM_PUTUPMASKPT, hdcMask, LOC(ptoMask)) 
PLGBLT.F90:            i = SendMessage(hwndDlg,WM_PUTUPLPOINTS,hdcDest,LOC(ptoDest)) 
PLGBLT.F90:            i = SendMessage (hwndDlg, WM_PUTUPSRCRECT, hdcSrc,LOC(ptoSrc)) 
PLGBLT.F90:            i = SendMessage (hwndDlg, WM_PUTUPMASKPT, hdcMask, LOC(ptoMask)) 
PLGBLT.F90:                  X(i) = GetDlgItemInt(hwndDlg, DID_P1X + 2*i, LOC(sccess), .TRUE.) 
PLGBLT.F90:                  Y(i) = GetDlgItemInt(hwndDlg, DID_P1Y + 2*i, LOC(sccess), .TRUE.) 
PLGBLT.F90:                  i = GetObject (hbm, 24, LOC(bm)) 
PLGBLT.F90:                  i = InvalidateRect (hwnd, LOC(ptoSrc%rectClip), .TRUE.) 
PLGBLT.F90:                  i = InvalidateRect (hwnd, LOC(ptoDest%rectClip), .TRUE.) 
PLGBLT.F90:               i  = DialogBoxParam (hInst, LOC(lpszMessage), hwnd, LOC(About), 0) 
PLGBLT.F90:         lpPoint(1).x = GetDlgItemInt(hwndDlg, DID_P1X, LOC(sccess), .TRUE.) 
PLGBLT.F90:         lpPoint(1).y = GetDlgItemInt(hwndDlg, DID_P1Y, LOC(sccess), .TRUE.) 
PLGBLT.F90:         lpPoint(2).x = GetDlgItemInt(hwndDlg, DID_P2X, LOC(sccess), .TRUE.) 
PLGBLT.F90:         lpPoint(2).y = GetDlgItemInt(hwndDlg, DID_P2Y, LOC(sccess), .TRUE.) 
PLGBLT.F90:         lpPoint(3).x = GetDlgItemInt(hwndDlg, DID_P3X, LOC(sccess), .TRUE.) 
PLGBLT.F90:         lpPoint(3).y = GetDlgItemInt(hwndDlg, DID_P3Y, LOC(sccess), .TRUE.) 
PLGBLT.F90:         XSrc = GetDlgItemInt(hwndDlg, DID_XSRC, LOC(sccess), .TRUE.) 
PLGBLT.F90:         YSrc = GetDlgItemInt(hwndDlg, DID_YSRC, LOC(sccess), .TRUE.) 
PLGBLT.F90:         nWidth = GetDlgItemInt(hwndDlg, DID_WIDTH, LOC(sccess), .TRUE.) 
PLGBLT.F90:         nHeight = GetDlgItemInt(hwndDlg, DID_HEIGHT, LOC(sccess), .TRUE.) 
PLGBLT.F90:         XMask = GetDlgItemInt(hwndDlg, DID_XMASK, LOC(sccess), .TRUE.) 
PLGBLT.F90:         YMask = GetDlgItemInt(hwndDlg, DID_YMASK, LOC(sccess), .TRUE.) 
PLGBLT.F90:               i = MessageBox (hwnd, LOC(lpszMessage), LOC(lpszHeader), MB_ICONHAND) 
PLGBLT.F90:         i = ModifyWorldTransform (hdc, LOC(x1), MWT_RIGHTMULTIPLY) 
PLGBLT.F90:         i = ModifyWorldTransform (hdc, LOC(x1), MWT_RIGHTMULTIPLY) 
PLGBLT.F90:         i = ModifyWorldTransform (hdc, LOC(x1), MWT_RIGHTMULTIPLY) 
PLGBLT.F90:            hrgnErase = CreatePolygonRgn (LOC(lpRgnErase), 4, ALTERNATE) 
PLGBLT.F90:            i1 = LPtoDP (hdc, LOC(lpPoint), 3) 
PLGBLT.F90:            hrgnBmp = CreatePolygonRgn (LOC(lpRgnBmp), 4, ALTERNATE) 
PLGBLT.F90:            i1 = PlgBlt (hdcDest, LOC(lpPoint), hdcSrc, XSrc, YSrc, nWidth, nHeight,&
PLGBLT.F90:         hrgnErase = CreatePolygonRgn (LOC(lpRgnErase), 4, ALTERNATE) 
PLGBLT.F90:         lpPoint(1).x = GetDlgItemInt(hwndDlg, DID_P1X, LOC(sccess), .TRUE.) 
PLGBLT.F90:         lpPoint(1).y = GetDlgItemInt(hwndDlg, DID_P1Y, LOC(sccess), .TRUE.) 
PLGBLT.F90:         lpPoint(2).x = GetDlgItemInt(hwndDlg, DID_P2X, LOC(sccess), .TRUE.) 
PLGBLT.F90:         lpPoint(2).y = GetDlgItemInt(hwndDlg, DID_P2Y, LOC(sccess), .TRUE.) 
PLGBLT.F90:         lpPoint(3).x = GetDlgItemInt(hwndDlg, DID_P3X, LOC(sccess), .TRUE.) 
PLGBLT.F90:         lpPoint(3).y = GetDlgItemInt(hwndDlg, DID_P3Y, LOC(sccess), .TRUE.) 
PLGBLT.F90:         hrgnBmp = CreatePolygonRgn (LOC(lpRgnBmp), 4, ALTERNATE) 
PLGBLT1.F90:      wc%lpfnWndProc = LOC(MainWndProc) 
PLGBLT1.F90:      wc%hIcon = LoadIcon(hInstance, LOC(lpszIconName)) 
PLGBLT1.F90:      wc%lpszMenuName =  LOC(lpszMenuName) 
PLGBLT1.F90:      wc%lpszClassName = LOC(lpszClassNAme) 
PLGBLT1.F90:      if (RegisterClass(LOC(wc)) == 0) then
PLGBLT1.F90:      LOC(lpszClassNAme),                                                &
PLGBLT1.F90:      LOC(lpszClassName),                                                &
PLGBLT1.F90:   hwndDlg = CreateDialogParam (hInst, LOC(lpszDlgName), hwndMain, LOC(DlgProc), 0) 
PLGBLT1.F90:   i = GetClientRect (hwndMain, LOC(rect1)) 
PLGBLT1.F90:   haccel = LoadAccelerators (hInst, LOC(lpszAccName)) 
PLGBLT1.F90:   haccel = LoadAccelerators (hInst, LOC("bltAccel"C)) 
PLGBLT1.F90:   do while (GetMessage(LOC(mesg),NULL, 0,0) .neqv. .FALSE.) 
PLGBLT1.F90:      if (TranslateAccelerator(hwndMain, haccel, LOC(mesg)) == 0) then
PLGBLT1.F90:         if (IsDialogMessage (hwndDlg, LOC(mesg)) .neqv. .TRUE.) then
PLGBLT1.F90:            i = DispatchMessage(LOC(mesg))
PLGBLT1.F90:      if ((PeekMessage (LOC(mesg), hwndMain, 0,0, PM_NOREMOVE) .eqv. .TRUE.).and. (nSpin .ne. 0)) then
PLGBLT1.F90:         i = GetClientRect (hwndMain, LOC(rect1)) 
PLGBLT1.F90:         hrgn = CreateRectRgnIndirect (LOC(ptoDest%rectClip)) 
PLGBLT1.F90:         hrgn = CreateRectRgnIndirect (LOC(ptoSrc%rectClip)) 
PLGBLT1.F90:         hrgn = CreateRectRgnIndirect (LOC(ptoMask%rectClip)) 
PLGBLT1.F90:         i = SendMessage (hwndDlg, WM_PUTUPLPOINTS, hdcDest,LOC(ptoDest)) 
PLGBLT1.F90:         i = SendMessage (hwndDlg, WM_PUTUPSRCRECT, hdcSrc,LOC(ptoSrc)) 
PLGBLT1.F90:         i = SendMessage (hwndDlg, WM_PUTUPMASKPT,  hdcMask,LOC(ptoMask)) 
PLGBLT1.F90:         hdc = BeginPaint(hwnd, LOC(ps)) 
PLGBLT1.F90:         i = EndPaint (hwnd, LOC(ps)) 
PLGBLT1.F90:         i  = GetClipBox (hdcDest, LOC(cliprect)) 
PLGBLT1.F90:         i = FillRect (hdcDest, LOC(cliprect), GetClassLong (hwnd, GCL_HBRBACKGROUND)) 
PLGBLT1.F90:            lpPoint(1).x = GetDlgItemInt(hwndDlg, DID_P1X, LOC(sccess), .TRUE.) 
PLGBLT1.F90:            lpPoint(1).y = GetDlgItemInt(hwndDlg, DID_P1Y, LOC(sccess), .TRUE.) 
PLGBLT1.F90:            lpPoint(2).x = GetDlgItemInt(hwndDlg, DID_P2X, LOC(sccess), .TRUE.) 
PLGBLT1.F90:            lpPoint(2).y = GetDlgItemInt(hwndDlg, DID_P2Y, LOC(sccess), .TRUE.) 
PLGBLT1.F90:            lpPoint(3).x = GetDlgItemInt(hwndDlg, DID_P3X, LOC(sccess), .TRUE.) 
PLGBLT1.F90:            lpPoint(3).y = GetDlgItemInt(hwndDlg, DID_P3Y, LOC(sccess), .TRUE.) 
PLGBLT1.F90:            XSrc = GetDlgItemInt(hwndDlg, DID_XSRC, LOC(sccess), .TRUE.) 
PLGBLT1.F90:            YSrc = GetDlgItemInt(hwndDlg, DID_YSRC, LOC(sccess), .TRUE.) 
PLGBLT1.F90:            nWidth = GetDlgItemInt(hwndDlg, DID_WIDTH, LOC(sccess), .TRUE.) 
PLGBLT1.F90:            nHeight = GetDlgItemInt(hwndDlg, DID_HEIGHT, LOC(sccess),.TRUE.) 
PLGBLT1.F90:            XMask = GetDlgItemInt(hwndDlg, DID_XMASK, LOC(sccess), .TRUE.) 
PLGBLT1.F90:            YMask = GetDlgItemInt(hwndDlg, DID_YMASK, LOC(sccess), .TRUE.) 
PLGBLT1.F90:            i = PlgBlt (hdcDest, LOC(lpPoint), hdcSrc, XSrc, YSrc, nWidth, nHeight,&
PLGBLT1.F90:            i = SendMessage(hwndDlg,WM_PUTUPLPOINTS,hdcDest,LOC(ptoDest)) 
PLGBLT1.F90:            i = SendMessage (hwndDlg, WM_PUTUPSRCRECT, hdcSrc,LOC(ptoSrc)) 
PLGBLT1.F90:            i = SendMessage (hwndDlg, WM_PUTUPMASKPT, hdcMask, LOC(ptoMask)) 
PLGBLT1.F90:                     X(i) = GetDlgItemInt(hwndDlg, DID_P1X + 2*i, LOC(sccess), .TRUE.) 
PLGBLT1.F90:                     Y(i) = GetDlgItemInt(hwndDlg, DID_P1Y + 2*i, LOC(sccess), .TRUE.) 
PLGBLT1.F90:                     i = GetObject (hbm, 24, LOC(bm)) 
PLGBLT1.F90:                     i = InvalidateRect (hwnd, LOC(ptoSrc%rectClip), .TRUE.) 
PLGBLT1.F90:                     i = InvalidateRect (hwnd, LOC(ptoDest%rectClip), .TRUE.) 
PLGBLT1.F90:               i  = DialogBoxParam (hInst, LOC(lpszDlgName), hwnd, LOC(About), 0) 
PLGBLT1.F90:         lpPoint(1).x = GetDlgItemInt(hwndDlg, DID_P1X, LOC(sccess), .TRUE.) 
PLGBLT1.F90:         lpPoint(1).y = GetDlgItemInt(hwndDlg, DID_P1Y, LOC(sccess), .TRUE.) 
PLGBLT1.F90:         lpPoint(2).x = GetDlgItemInt(hwndDlg, DID_P2X, LOC(sccess), .TRUE.) 
PLGBLT1.F90:         lpPoint(2).y = GetDlgItemInt(hwndDlg, DID_P2Y, LOC(sccess), .TRUE.) 
PLGBLT1.F90:         lpPoint(3).x = GetDlgItemInt(hwndDlg, DID_P3X, LOC(sccess), .TRUE.) 
PLGBLT1.F90:         lpPoint(3).y = GetDlgItemInt(hwndDlg, DID_P3Y, LOC(sccess), .TRUE.) 
PLGBLT1.F90:         XSrc = GetDlgItemInt(hwndDlg, DID_XSRC, LOC(sccess), .TRUE.) 
PLGBLT1.F90:         YSrc = GetDlgItemInt(hwndDlg, DID_YSRC, LOC(sccess), .TRUE.) 
PLGBLT1.F90:         nWidth = GetDlgItemInt(hwndDlg, DID_WIDTH, LOC(sccess), .TRUE.) 
PLGBLT1.F90:         nHeight = GetDlgItemInt(hwndDlg, DID_HEIGHT, LOC(sccess), .TRUE.) 
PLGBLT1.F90:         XMask = GetDlgItemInt(hwndDlg, DID_XMASK, LOC(sccess), .TRUE.) 
PLGBLT1.F90:         YMask = GetDlgItemInt(hwndDlg, DID_YMASK, LOC(sccess), .TRUE.) 
PLGBLT1.F90:               i = MessageBox (hwnd, LOC(lpszMessage), LOC(lpszHeader), MB_ICONHAND) 
PLGBLT1.F90:         i = ModifyWorldTransform (hdc, LOC(x1), MWT_RIGHTMULTIPLY) 
PLGBLT1.F90:         i = ModifyWorldTransform (hdc, LOC(x1), MWT_RIGHTMULTIPLY) 
PLGBLT1.F90:         i = ModifyWorldTransform (hdc, LOC(x1), MWT_RIGHTMULTIPLY) 
PLGBLT1.F90:            hrgnErase = CreatePolygonRgn (LOC(lpRgnErase), 4, ALTERNATE) 
PLGBLT1.F90:            i1 = LPtoDP (hdc, LOC(lpPoint), 3) 
PLGBLT1.F90:            hrgnBmp = CreatePolygonRgn (LOC(lpRgnBmp), 4, ALTERNATE) 
PLGBLT1.F90:            i1 = PlgBlt (hdcDest, LOC(lpPoint), hdcSrc, XSrc, YSrc, nWidth, nHeight,&
PLGBLT1.F90:         hrgnErase = CreatePolygonRgn (LOC(lpRgnErase), 4, ALTERNATE) 
PLGBLT1.F90:         lpPoint(1).x = GetDlgItemInt(hwndDlg, DID_P1X, LOC(sccess), .TRUE.) 
PLGBLT1.F90:         lpPoint(1).y = GetDlgItemInt(hwndDlg, DID_P1Y, LOC(sccess), .TRUE.) 
PLGBLT1.F90:         lpPoint(2).x = GetDlgItemInt(hwndDlg, DID_P2X, LOC(sccess), .TRUE.) 
PLGBLT1.F90:         lpPoint(2).y = GetDlgItemInt(hwndDlg, DID_P2Y, LOC(sccess), .TRUE.) 
PLGBLT1.F90:         lpPoint(3).x = GetDlgItemInt(hwndDlg, DID_P3X, LOC(sccess), .TRUE.) 
PLGBLT1.F90:         lpPoint(3).y = GetDlgItemInt(hwndDlg, DID_P3Y, LOC(sccess), .TRUE.) 
PLGBLT1.F90:         hrgnBmp = CreatePolygonRgn (LOC(lpRgnBmp), 4, ALTERNATE) 
PLGBLT3.F90:         i = SetDlgItemText(hwnd, DID_P1X     , LOC(lpszEditText)) 
PLGBLT3.F90:         i = SetDlgItemText(hwnd, DID_P1Y     , LOC(lpszEditText)) 
PLGBLT3.F90:         i = SetDlgItemText(hwnd, DID_P2X     , LOC(lpszEditText)) 
PLGBLT3.F90:         i = SetDlgItemText(hwnd, DID_P2Y     , LOC(lpszEditText)) 
PLGBLT3.F90:         i = SetDlgItemText(hwnd, DID_P3X     , LOC(lpszEditText)) 
PLGBLT3.F90:         i = SetDlgItemText(hwnd, DID_P3Y     , LOC(lpszEditText)) 
PLGBLT3.F90:         i = SetDlgItemText(hwnd, DID_XSRC    , LOC(lpszEditText)) 
PLGBLT3.F90:         i = SetDlgItemText(hwnd, DID_YSRC    , LOC(lpszEditText)) 
PLGBLT3.F90:         i = SetDlgItemText(hwnd, DID_WIDTH   , LOC(lpszEditText)) 
PLGBLT3.F90:         i = SetDlgItemText(hwnd, DID_HEIGHT  , LOC(lpszEditText)) 
PLGBLT3.F90:         i = SetDlgItemText(hwnd, DID_XMASK   , LOC(lpszEditText)) 
PLGBLT3.F90:         i = SetDlgItemText(hwnd, DID_YMASK   , LOC(lpszEditText)) 
PLGBLT3.F90:         call copymemory(LOC(pto), lParam, 96)
PLGBLT3.F90:         i = GetViewportOrgEx (hdc, LOC(origin))
PLGBLT3.F90:            i  = LPtoDP (pto%hdc, LOC(p), 1) 
PLGBLT3.F90:         i = LPtoDP (pto%hdc, LOC(p), 1) 
PLGBLT3.F90:         i = LPtoDP (pto%hdc, LOC(p), 1) 
PLGBLT3.F90:         call copymemory(LOC(pto), lParam, 96)
PLGBLT3.F90:         i = GetViewportOrgEx (hdc, LOC(origin)) 
PLGBLT3.F90:         i = LPtoDP (pto%hdc, LOC(p1), 1) 
PLGBLT3.F90:         i = LPtoDP (pto%hdc, LOC(p2), 1) 
PLGBLT3.F90:         call copymemory(LOC(pto), lParam, 96)
PLGBLT3.F90:         i = GetViewportOrgEx (hdc, LOC(origin)) 
PLGBLT3.F90:         i = LPtoDP (pto%hdc, LOC(p1), 1) 
PLGBLT3.F90:                  i = InvalidateRect (hwndMain, LOC(ptoSrc%rectClip), .TRUE.) 
PLGBLT3.F90:                  i = InvalidateRect (hwndMain, LOC(ptoDest%rectClip), .TRUE.)
PLGBLT3.F90:                     i = InvalidateRect (hwndMain, LOC(ptoMask%rectClip), .TRUE.) 
PLGBLT3.F90:                     i = InvalidateRect (hwndMain, LOC(ptoDest%rectClip), .TRUE.) 
TRACK.F90:         i = GetWorldTransform (pto%hdc, LOC(pto%xfmChange)) 
TRACK.F90:         i = DPtoLP (pto%hdc, LOC(mouWorld), 1) 
TRACK.F90:         if (PtInRect (LOC(pto%rect1), mouWorld) .neqv. .FALSE.) then
TRACK.F90:         i  = DPtoLP (pto%hdc, LOC(mouWorld), 1) 
TRACK.F90:         i = LPtoDP (pto%hdc, LOC(newmouScreen), 1) 
TRACK.F90:         i = ClientToScreen (hwnd, LOC(newmouScreen))
TRACK.F90:         i  = GetWorldTransform (pto%hdc, LOC(pto%xfmDown)) 
TRACK.F90:         i = SetWorldTransform(pto%hdc, LOC(pto%xfmDown)) 
TRACK.F90:         i = DPtoLP (pto%hdc, LOC(mouWorld), 1) 
TRACK.F90:         i = GetViewportOrgEx (pto%hdc, LOC(orgDevice)) 
TRACK.F90:         i = GetWorldTransform(pto%hdc, LOC(pto%xfmChange)) 
TRACK.F90:               i = SetWorldTransform (pto%hdc, LOC(pto%xfmChange) )
TRACK.F90:               i = SetWorldTransform (pto%hdc, LOC(pto%xfmChange) )
TRACK.F90:            i = SetWorldTransform (pto%hdc, LOC(pto%xfmChange)) 
TRACK.F90:            i = ModifyWorldTransform (pto%hdc, LOC(pto%xfmChange),          &
TRACK.F90:            i = ModifyWorldTransform (pto%hdc, LOC(pto%xfmChange),          &
TRACK.F90:            i = GetWorldTransform (pto%hdc, LOC(pto%xfmChange)) 
TRACK.F90:            i = SetWorldTransform (pto%hdc, LOC(pto%xfmChange)) 
TRACK.F90:            i = SetWorldTransform (pto%hdc, LOC(pto%xfmChange)) 
TRACK.F90:            i =  SetWorldTransform (pto%hdc, LOC(pto%xfmChange)) 
TRACK.F90:            i  = SetWorldTransform (pto%hdc, LOC(pto%xfmChange)) 
